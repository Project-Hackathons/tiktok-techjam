import React, { useEffect } from "react";
import Head from "next/head";
import {
  Flex,
  VStack,
  Text,
  Box,
  Image,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  Button,
} from "@chakra-ui/react";
import { useState } from "react";
import GiftBox from "@/components/GiftBox";
import { userInfo, UserType, Reward } from "./api/userInfo";

type ModalStateType = {
  rid: number;
  modal_opened: boolean;
  ticket_redeemed: boolean;
};

const Rewards = () => {
  const [rewardList, setRewardList] = useState<Reward[]>();
  const [modalState, setModalState] = useState<ModalStateType[]>();

  useEffect(() => {
    getUserInfo();
  }, []);

  const getUserInfo = async () => {
    let userDetails: UserType = await userInfo();
    setRewardList(() => {
      return userDetails.rewards.filter((value) => value.claimed == 0);
    });
    setModalState(
      userDetails.rewards.map((value) => {
        return {
          rid: value.rid,
          modal_opened: false,
          ticket_redeemed: false,
        };
      })
    );
  };

  const handleOpen = (index: number, rid: number) => {
    const newState = modalState?.map<any>((state, i) =>
      i === index ? { ...state, modal_opened: true } : state
    );
    setModalState(newState);
  };

  const handleClose = (index: any, is_ticket_redeemed: boolean) => {
    if (!is_ticket_redeemed) {
      const newState = modalState?.map((state, i) =>
        i === index ? { ...state, modal_opened: false } : state
      );
      setModalState(newState);
    } else {
      //call endpoint and reupdate all states
      getUserInfo();
    }
  };

  const handleRedeemTicket = (index: any, rid: number) => {
    const newState = modalState?.map((state, i) =>
      i === index ? { ...state, ticket_redeemed: true } : state
    );
    setModalState(newState);

    // delete reward from db
    const deleteReward = async () => {
      try {
        const response = await fetch(`https://tt.tchlabs.net:5000/claim/${rid}`);
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        const result = await response.json();
        console.log(`rid${rid} has been removed from db`);
      } catch (error) {
        console.log(error);
      }
    };

    deleteReward();
  };

  return (
    <>
      <Head>
        <title>Rewards</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        {/* <meta name="viewport" content="width=device-width, initial-scale=1" /> */}
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex bg="#070F2B" w="100%" pb="80px" h="100vh">
        <VStack
          gap="1.5rem"
          w="100%"
          maxW="420px"
          maxH="100vh"
          overflowY="scroll"
          sx={{
            "::-webkit-scrollbar": {
              display: "none", // Hide scrollbar for Chrome, Safari, and Opera
            },
            "-ms-overflow-style": "none", // Hide scrollbar for Internet Explorer and Edge
            "scrollbar-width": "none", // Hide scrollbar for Firefox
          }}
        >
          <Flex w="100%" justifyContent="center" pt="1.5rem" direction="column">
            <Text
              textAlign="center"
              color="white"
              fontWeight="bold"
              fontSize="xl"
            >
              Total Rewards
            </Text>
            <Text pt="10px" textAlign="center" color="white" fontSize="l">
              {`You have ${rewardList?.length} unopened rewards.`}
            </Text>
          </Flex>
          <Flex
            w="100%"
            justify="space-between"
            flexWrap="wrap"
            rowGap="20px"
            px="30px"
          >
            {rewardList?.map((value, index) => {
              return (
                <Box
                  key={value.rid}
                  w="45%"
                  transition="transform 0.3s ease"
                  _hover={{ cursor: "pointer", transform: "scale(1.1)" }}
                >
                  <Image
                    src={`/rewards/reward${(value.rid % 3) + 1}.avif`}
                    alt="rewardImg"
                    borderRadius="20px"
                    onClick={() => handleOpen(index, value.rid)}
                  />
                  <Modal
                    isOpen={modalState ? modalState[index].modal_opened : false}
                    onClose={() =>
                      handleClose(
                        index,
                        modalState ? modalState[index].ticket_redeemed : false
                      )
                    }
                    isCentered
                    size="xs"
                  >
                    <ModalOverlay />
                    <ModalContent
                      h="313px"
                      mx="30px"
                      bgColor="#070F2B"
                      textColor="white"
                    >
                      <ModalHeader>Congratulations!</ModalHeader>
                      {modalState && !modalState[index].ticket_redeemed && (
                        <ModalCloseButton borderColor="none" />
                      )}
                      {modalState && modalState[index].ticket_redeemed ? (
                        <ModalBody>
                          <Flex
                            gap="20px"
                            flexDir="column"
                            justifyContent="center"
                            alignItems="center"
                            height="100%"
                          >
                            <Image
                              src="/rewards/rewardLogo.svg"
                              alt="rewardLogo"
                              boxSize="80px"
                            ></Image>
                            <Text>
                              {`You have won \$ ${value.amount} worth of ${value.message}!`}
                            </Text>
                          </Flex>
                        </ModalBody>
                      ) : (
                        <GiftBox
                          handleClick={handleRedeemTicket}
                          index={index}
                          rid={value.rid}
                        />
                      )}

                      <ModalFooter>
                        <Flex w="100%" justify="space-evenly">
                          {modalState && modalState[index].ticket_redeemed && (
                            <Button
                              bgGradient="linear(to-r, #ff0050, 45%, #00f2ea)"
                              mr={3}
                              onClick={() =>
                                handleClose(
                                  index,
                                  modalState[index].ticket_redeemed
                                )
                              }
                            >
                              <Text color="white" fontWeight="bold">
                                Close
                              </Text>
                            </Button>
                          )}
                        </Flex>
                      </ModalFooter>
                    </ModalContent>
                  </Modal>
                </Box>
              );
            })}
          </Flex>
        </VStack>
      </Flex>
    </>
  );
};

export default Rewards;
